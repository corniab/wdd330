{
	"pages": [
		{
			"url": "this/index.html",
			"description": "This Notes",
			"notes": [],
			"links": []
		},
		{
			"url": "objects/index.html",
			"description": "Object Notes",
			"notes": [],
			"links": []
		},
		{
			"url": "dom/index.html",
			"description": "Dom Notes",
			"notes": [
				"Strings are compared character by character using 'lexographical' order. If all the charaters are the same and they are the same length then they are equal. Otherwise the longer string is greater.",
				"Everything in javascript is a primitive value or an object.",
				"Objects are mutable."
			],
			"links": [{ "url": "www.google.com", "description": "google.com" }]
		},
		{
			"url": "events/index.html",
			"description": "Events Notes",
			"notes": [
				"Event propagation is the order that the events fire on each element: there are two kinds bubbling and capturing.",
				"Bubbling is when the event fires on the element clicked first, then fires on each parent node until it reaches the root",
				"Capturing works the opposite. Bubbling is the default.",
				"Event delegation is used to attach an event listener to a parent element in order to capture events that are triggered by its child elements"
			],
			"links": []
		},
		{
			"url": "https://javascript.info/comparison#string-comparison",
			"description": "How JavaScript compares strings."
		}
	]
}
